<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>poster-model-select</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>
    <script type="text/javascript" src="simplest_example.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.js"></script>
  </head>
  <body onload="draw()">
    <%- include("header"); %>
    <div class="action-wrapper">
      <div class="model-select">
        <form class="" action="poster-input-image" method="get">
          <div class="head-caption">
            <h2 id="theme1">視点を共有する</h2>
          </div>
          <div>
            <div class="know-contents">
              <br>
              <div class="box17" id="your_container">
                <svg height=585 width=1400></svg>
              </div>
            </div>
            <canvas id="myDoughnutChart" width="40" height="10">
            </canvas>
            <h3>この作品に対する解釈・イメージを共有してみよう</h3>
            <div>
              <label>
                <input type="checkbox" name="" value="">匿名でアップロードする。
              </label>
            </div>
            <form id="models" action="poster-input-image" method="get">
              <label><input type="radio" name="model" value="1"><p>幸福</p></label>
              <label><input type="radio" name="model" value="2"><p>苦しみ</p></label>
              <label><input type="radio" name="model" value="3"><p>悲しみ</p></label>
              <label><input type="radio" name="model" value="4"><p>希望</p></label>
              <label><input type="radio" name="model" value="5"><p>論理</p></label>
              <label><input type="radio" name="model" value="6"><p>怒り</p></label>
              <label><input type="radio" name="model" value="7"><p>愛</p></label>
              <label><input type="radio" name="model" value="8"><p>感動</p></label>
              <label><input type="radio" name="model" value="9"><p>疑い</p></label>
              <label><input type="radio" name="model" value="10"><p>熱中</p></label>
            </form>
            <!-- テキストボックス、送信ボタン④ -->
            <div id="bms_send">
              <textarea id="bms_send_message"></textarea>
              <div id="bms_send_btn">送信</div>
            </div>
          </div>
        </form>
      </div>
        <a href = "/painting-know" class="back">戻る</a>
    </div>
    <script>
      var ctx = document.getElementById("myDoughnutChart");
      var myDoughnutChart= new Chart(ctx, {
        type: 'doughnut',
        data: {
          labels: ["ほっこりする", "優しい感じがする", "思いやりに溢れている", "感動的な表現が得意そうだ", "家族を持つということの大変さを感じた"], //データ項目のラベル
          datasets: [{
              backgroundColor: [
                  "#c97586",
                  "#bbbcde",
                  "#93b881",
                  "#e6b422", 
                  "#a4a267"
              ],
              data: [45, 25, 13, 12, 5] //グラフのデータ
          }]
        },
        options: {
          title: {
            display: true,
            //グラフタイトル
            text: '感性傾向分析'
          }
        }
      });
    </script>
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script>
      //nodeのデータを作成
      var range =110;
      var nodes = d3.range(0, range).map(function(d,i){ return {id:i,label: "n"+d ,r:15}});
      console.log(nodes)

      //-------★追加-------
      //linkのデータを作成//
      //３段階の構造にする1を中心、2~10を二段階、11~110までを三段階
      var links = d3.range(1,range).map(function(d,i){ 
          if(d <= 10){
              return {id:i,label:"l"+d,source:0,target:d}
          }else{
              return {id:i,label:"l"+d,source:(d-d%10)/10,target:d}
          }
      })
      //-------★追加ここまで-------

      //メイン！D3.jsのforcesimulation
      //svg領域の大きさを定義する
      var svgheight = 960,
            svgwidth = 1000;
      var simulation = d3.forceSimulation()
                  .force("collide",d3.forceCollide().radius(function(d){return d.r;}).iterations(16) )
                  //-------★追加-------
                  //linkの力学設定
                  .force("link", d3.forceLink().strength(1.0).distance(function(d){
                      if(d.id<10){
                          return 200;
                      }else{
                          return 20;
                      }
                  //-------★追加ここまで-------
                  }))          
                  .force("charge", d3.forceManyBody().strength(-100))
                  .force("center", d3.forceCenter(svgwidth / 2, svgheight / 2))
                  .force("y", d3.forceY())
                  .force("x", d3.forceX())
          ;
          
      //-------★追加-------
      //linkをsvg領域に描画する
      var link = d3.select("svg").append("g")
          .attr("class", "links")
          .selectAll("line")
          .data(links)
          .enter()
          .append("line")
          .attr("stroke", "black")
          ;
      //-------★追加ここまで-------
          
      //nodeの色を定義
      var color = d3.scaleOrdinal(["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3","#3366ff","#99ff66"]);
      //nodeをsvg領域に描画する
      var node = d3.select("svg").append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodes)
                .enter()
                .append("circle")
                .attr("class","node")
                .attr("r", function(d){  return d.r ;})
                .attr("fill",function(d){ 
                      if(d.id==0){
                          return "red";
                      }else{
                          if(d.id<=10){
                              return color(d.id);
                          }else{
                              return color((d.id-d.id%10)/10);
                          }
                      }
                  })
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended)
                )
                ; 
                
      //nodeをマウスドラッグで動かすための関数
      function dragstarted(d) {
            if (!d3.event.active) simulation.alphaTarget(.03).restart();
            d.fx = d.x;
            d.fy = d.y;
      }
      function dragged(d) {
          d.fx = d3.event.x;
          d.fy = d3.event.y;
      }
      function dragended(d) {
          if (!d3.event.active) simulation.alphaTarget(.03);
          d.fx = null;
          d.fy = null;
      }

      //動作開始！
      simulation
          .nodes(nodes)
          .on("tick", ticked);
      //-------★追加-------
      simulation.force("link")
          .links(links);
      //-------★追加ここまで-------

      function ticked() {
          node
              .attr("cx", function(d) { return d.x; })
              .attr("cy", function(d) { return d.y; });
      //-------★追加-------
          link
              .attr("x1", function(d) { return d.source.x; })
              .attr("y1", function(d) { return d.source.y; })
              .attr("x2", function(d) { return d.target.x; })
              .attr("y2", function(d) { return d.target.y; });
      //-------★追加ここまで-------
      }  
    </script>
    <script type="text/javascript">
    function draw() {

    var nodes = new vis.DataSet([
        { id: 1, label: "優しい感じがする", title: "yamada01", size: 35, color: {
            border: "rgba(255, 0, 0, 0.8)",
            background: "white"
          }
        },
        { id: 2, label: "思いやりに溢れている", title: "katooooo", size: 25},
        { id: 3, label: "ほっこりする", title: "imim", size: 40, color: {
            border: "rgba(0, 255, 255, 0.8)",
            background: "rgba(150, 150, 0, 0.8)"
          }
        },
        { id: 4, label: "家族を持つということの大変さを感じた", title: "takeshi", size: 10, color: {
            border: "rgba(200, 255, 0, 0.8)",
            background: "rgba(10, 15, 200, 0.8)"
          }
        },
        { id: 5, label: "感動的な表現が得意そうだ", title: "yahho-", size: 20, color: {
            border: "rgba(150, 150, 200, 0.8)",
            background: "rgba(50, 10, 200, 0.8)"
          }
        },
        // { id: 5, label: msg.a}
    ]);

    // function buttonClick(){
    //   msg.a = bms_send_message.value;
    // }
    //
    // let bms_send_message = document.getElementById('bms_send_message');
    // bms_send_message.value = 'コメントをお願いします';
    // let msg = document.getElementById('mynetwork');
    //
    // let bms_send_btn = document.getElementById('bms_send_btn');
    // bms_send_btn.addEventListener('click', buttonClick);

    var edges = new vis.DataSet([
        { from: 1, to: 3 },
        { from: 1, to: 2 },
        { from: 4, to: 3 },
        { from: 5, to: 1 }
    ]);

    var data = {
        nodes: nodes,
        edges: edges
    }

    var options = {
        autoResize: true,   // ウィンドウサイズをレスポンシブにする
        width: "100%",      // ウィンドウ横幅
        height: "580",     // ウィンドウ縦幅
        nodes: {
            shape: "dot",
            borderWidth: 4,
            size: 30,
            color: {
                border: "#165e83",
                background: "rgba(174, 56, 70, 0.9)"
            },
            font: { color: "black" }
        },
        edges: {
            color: "lightgreen",
        }
    }

    var container = document.getElementById("mynetwork");
    var network = new vis.Network(container, data, options);
  }
    </script>
  </body>
</html>
